using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Windows.Forms.DataVisualization.Charting;
using System.Xml.Linq;
using System.Xml.Schema;
/*
 ST10069127
 Luwano Casby Mhango
 GROUP 1
 PROG 3B
 ICE 1
 */
namespace _3xPlus1.Classes
{
    public partial class Tem2 : Form
    {
        // This a DataPoint to store single points on the chart
        public DataPoint point = new DataPoint();

        // List to store the sequence of numbers generated by the 3x+1 algorithm
        //private readonly List<long> DataList;
        //public List<long> DataListPublic => DataList;
       

        // Instance of T3XPlus class to perform calculations
        public T3XPlus obj = new T3XPlus();

        // Constructor to initialize the form and its components
        public Tem2()
        {
            InitializeComponent();

            // Start the initial setup
            Start();

            // Disable cross-thread operation checks
            CheckForIllegalCrossThreadCalls = false;

            // Enable zooming and selection on chart1
            this.chart1.ChartAreas[0].AxisX.IsStartedFromZero = false;
            this.chart1.ChartAreas[0].CursorX.IsUserSelectionEnabled = true;
            this.chart1.ChartAreas[0].CursorY.IsUserSelectionEnabled = true;
            this.chart1.ChartAreas[0].AxisX.ScaleView.Zoomable = true;
            this.chart1.ChartAreas[0].AxisY.ScaleView.Zoomable = true;
            this.chart1.ChartAreas[0].AxisX.Interval = 1;
        }

        // Method to start the initial setup of the chart
        public void Start()
        {
            // Clear any existing series on the chart
            chart1.Series.Clear();
            // Get the title of the selected tab
            string title = this.tabControl1.SelectedTab.Text;

            // Sample data for initial chart setup
            List<int> localDataList = new List<int> { 0, 1, 2, 3, 4, 5 };

            // Create a new series with the title of the selected tab
            Series series = new Series
            {
                Name = title,
                Color = System.Drawing.Color.Transparent,
                ChartType = GetSelectedChartType()
            };
            // Add the series to the chart
            chart1.Series.Add(series);
            // Add sample data points to the series
            for (int i = 0; i < localDataList.Count; i++)
            {
                series.Points.AddXY(i, localDataList[i]);
            }
            // Redraw the chart
            chart1.Invalidate();
        }

        // Event handler for the Run button click
        private void btnRun_Click(object sender, EventArgs e)
        {
            // Validate the input
            bool isNum = int.TryParse(this.txtInput.Text, out int xValue);

            if (isNum && xValue > 0)
            {
                // If 3x+1 tab is selected or if Collatz tab is selected
                if (this.tabControl1.SelectedIndex == 0)
                {
                    // Perform the 3x+1 calculation
                    obj.calc(xValue);
                    // Plot the calculated data on the chart
                    PlotChart();
                }
                else if (this.tabControl1.SelectedIndex == 1)
                {
                    // Perform the 3x+1 calculation
                    obj.calc(xValue);
                    // Plot the calculated data on the chart
                    PlotChart();
                }
            }
            else
            {
                // If input is invalid, reset the chart and show a message
                btnClear_Click(sender, e);
                obj.DataListPublic.Clear();
                Start();
                MessageBox.Show("Please enter a valid integer greater than 0.");
            }
            // Reset the zoom on the chart
            ResetZoom();
        }

        // Method to plot the chart with the calculated data
        private void PlotChart()
        {
            // Get the title of the selected tab
            string title = this.tabControl1.SelectedTab.Text;
            // Clear any existing series on the chart
            chart1.Series.Clear();
            // Clear the text box
            this.textBox1.Clear();

            // Create a new series with the title of the selected tab
            Series series = new Series
            {
                Name = title,
                Color = System.Drawing.Color.Blue,
                ChartType = GetSelectedChartType()
            };
            // Add the series to the chart
            chart1.Series.Add(series);

            // Add calculated data points to the series
            for (int i = 0; i < obj.DataListPublic.Count; i++)
            {
                series.Points.AddXY(i, obj.DataListPublic[i]);
                point = new DataPoint(i, obj.DataListPublic[i])
                {
                    Label = $"({i}, {obj.DataListPublic[i]})"
                };
                // Add the point to the series
                series.Points.Add(point);

                // Update the text box with the calculated data
                if (i == 0)
                {
                    this.textBox1.Text += obj.DataListPublic[i].ToString();
                }
                else
                {
                    this.textBox1.Text += "; " + obj.DataListPublic[i].ToString();
                }
            }

            // Update the label with the size of the data list
            this.lblListSizeNum.Text = (obj.DataListPublic.Count + 1).ToString();
            // Redraw the chart
            chart1.Invalidate();
        }

        // Method to get the selected chart type based on radio button selection
        private SeriesChartType GetSelectedChartType()
        {
            if (rBtnLine.Checked)
            {
                return SeriesChartType.Line;
            }
            else if (rBtnColumn.Checked)
            {
                return SeriesChartType.Column;
            }
            else if (rBtnSpine.Checked)
            {
                return SeriesChartType.Spline;
            }
            else
            {
                return SeriesChartType.Line;
            }
        }

        // Event handler for the Clear button click
        private void btnClear_Click(object sender, EventArgs e)
        {
            // Get the title of the selected tab
            string title = this.tabControl1.SelectedTab.Text;
            // Clear any existing series on the chart
            chart1.Series.Clear();
            // Clear the text box
            textBox1.Clear();
            // Clear the label
            this.lblListSizeNum.Text = "";
            // Clear the input text box
            this.txtInput.Clear();
            // Reset the zoom on the chart
            obj.DataListPublic.Clear();
            Start();
            ResetZoom();
        }

        // Event handler for the Line radio button checked change
        private void rBtnLine_CheckedChanged(object sender, EventArgs e)
        {
            // Get the title of the selected tab
            string title = this.tabControl1.SelectedTab.Text;
            // Clear any existing series on the chart
            chart1.Series.Clear();
            // Create a new series with the title of the selected tab
            Series series = new Series
            {
                Name = title,
                Color = System.Drawing.Color.Blue,
                ChartType = GetSelectedChartType()
            };

            // Add the series to the chart
            chart1.Series.Add(series);
            // Add calculated data points to the series
            for (int i = 0; i < obj.DataListPublic.Count; i++)
            {
                point = new DataPoint(i, obj.DataListPublic[i])
                {
                    Label = $"({i}, {obj.DataListPublic[i]})"
                };
                series.Points.Add(point);
                series.Points.AddXY(i, obj.DataListPublic[i]);
            }
            if (obj.DataListPublic.Count == 0)
            {
                Start();
            }
            // Reset the zoom on the chart
            ResetZoom();
            // Redraw the chart
            chart1.Invalidate();
        }

        // Event handler for the Column radio button checked change
        private void rBtnColumn_CheckedChanged(object sender, EventArgs e)
        {
            // Get the title of the selected tab
            string title = this.tabControl1.SelectedTab.Text;
            // Clear any existing series on the chart
            chart1.Series.Clear();
            // Create a new series with the title of the selected tab
            Series series = new Series
            {
                Name = title,
                Color = System.Drawing.Color.Blue,
                ChartType = GetSelectedChartType()
            };

            // Add the series to the chart
            chart1.Series.Add(series);
            // Add calculated data points to the series
            for (int i = 0; i < obj.DataListPublic.Count; i++)
            {
                point = new DataPoint(i, obj.DataListPublic[i])
                {
                    Label = $"({i}, {obj.DataListPublic[i]})"
                };
                series.Points.Add(point);
                series.Points.AddXY(i, obj.DataListPublic[i]);
            }
            if (obj.DataListPublic.Count == 0)
            {
                Start();
            }
            // Reset the zoom on the chart
            ResetZoom();
            // Redraw the chart
            chart1.Invalidate();
        }

        // Event handler for the Spine radio button checked change
        private void rBtnSpine_CheckedChanged(object sender, EventArgs e)
        {
            // Get the title of the selected tab
            string title = this.tabControl1.SelectedTab.Text;
            // Clear any existing series on the chart
            chart1.Series.Clear();
            // Create a new series with the title of the selected tab
            Series series = new Series
            {
                Name = title,
                Color = System.Drawing.Color.Blue,
                ChartType = GetSelectedChartType()
            };

            // Add the series to the chart
            chart1.Series.Add(series);
            // Add calculated data points to the series
            for (int i = 0; i < obj.DataListPublic.Count; i++)
            {
                point = new DataPoint(i, obj.DataListPublic[i])
                {
                    Label = $"({i}, {obj.DataListPublic[i]})"
                };
                series.Points.Add(point);
                series.Points.AddXY(i, obj.DataListPublic[i]);
            }
            if (obj.DataListPublic.Count == 0)
            {
                Start();
            }
            // Reset the zoom on the chart            
            ResetZoom();
            // Redraw the chart
            chart1.Invalidate();
        }

        // Method to reset the zoom on the chart
        private void ResetZoom()
        {
            this.chart1.ChartAreas[0].AxisX.ScaleView.ZoomReset();
            this.chart1.ChartAreas[0].AxisY.ScaleView.ZoomReset();
        }

        // Event handler for the Reset Zoom button click
        public void btnResetZoom_Click(object sender, EventArgs e)
        {
            ResetZoom();
        }


        // Event handler for tab change
        private void Change_Tab(object sender, EventArgs e)
        {
            if (this.tabControl1.SelectedIndex == 0)
            {
                // Add controls to the first tab
                this.tabPage1.Controls.Add(this.rBtnSpine);
                this.tabPage1.Controls.Add(this.rBtnColumn);
                this.tabPage1.Controls.Add(this.rBtnLine);
                this.tabPage1.Controls.Add(this.panel1);
                this.tabPage1.Controls.Add(this.chart1);

                // Update the label with the current chart title
                this.lblCurrentChart.Text = this.tabPage1.Text;
                // Clear any existing series on the chart
                chart1.Series.Clear();
                // Clear the text box
                this.textBox1.Clear();
                // Clear the label
                this.lblListSizeNum.Text = "";
                // Clear the input text box
                this.txtInput.Clear();
                // Reset the zoom on the chart
                ResetZoom();
                Start();
            }
            else if (this.tabControl1.SelectedIndex == 1)
            {
                // Add controls to the second tab
                this.Stock_Tracker.Controls.Add(this.rBtnSpine);
                this.Stock_Tracker.Controls.Add(this.rBtnColumn);
                this.Stock_Tracker.Controls.Add(this.rBtnLine);
                this.Stock_Tracker.Controls.Add(this.lblCurrentChart);
                this.Stock_Tracker.Controls.Add(this.panel3);
                this.Stock_Tracker.Controls.Add(this.btnResetZoom);
                this.Stock_Tracker.Controls.Add(this.chart1);
                // Update the label with the current chart title
                this.lblCurrentChart.Text = this.Stock_Tracker.Text;
                // Clear any existing series on the chart
                chart1.Series.Clear();
                // Clear the text box
                textBox1.Clear();
                // Clear the label
                this.lblListSizeNum.Text = "";
                // Clear the input text box
                this.txtInput.Clear();
                // Reset the zoom on the chart
                ResetZoom();
                Start();
            }
        }
        // Method to plot the chart with the calculated data
        private void PlotRandomStockChart()
        {
            List<long> randomList = new List<long>();
            // Get the title of the selected tab
            string title = this.tabControl1.SelectedTab.Text;
            // Clear any existing series on the chart
            // Clear the text box
            this.textBox1.Text += "other chart data ";

            //remove, for demo 
            long xValue1 = 200;
            long xValue2 = 30;

            randomList.Add((long)xValue1);
            randomList.Add((long)xValue2);

            Random random = new Random();


            // Create a new series with the title of the selected tab
            Series series = new Series
            {
                Name = title,
                Color = System.Drawing.Color.Green,
                ChartType = GetSelectedChartType()
            };
            // Add the series to the chart
            chart1.Series.Add(series);

            // Add calculated data points to the series
            for (int i = 0; i < 2000; i++)
            {
                if (i + 1 >= randomList.Count) break; // Makes sure we do not access out of range

                if (randomList[i + 1] > randomList[i])
                {
                    xValue1 = randomList[i + 1] - randomList[i];
                    xValue2 = random.Next((int)(randomList[i + 1] - xValue1), (int)(randomList[i] + xValue1));
                    while (xValue2 < 0)
                    {
                        xValue2 = random.Next((int)(randomList[i + 1] - xValue1), (int)(randomList[i] + xValue1));
                    }
                }
                else
                {
                    xValue1 = randomList[i] - randomList[i + 1];
                    xValue2 = random.Next((int)(randomList[i] - xValue1), (int)(randomList[i + 1] + xValue1));
                    while (xValue2 < 0)
                    {
                        xValue2 = random.Next((int)(randomList[i] - xValue1), (int)(randomList[i + 1] + xValue1));
                    }
                }

                series.Points.AddXY(i, randomList[i]);
                point = new DataPoint(i, randomList[i])
                {
                    Label = $"({i}, {randomList[i]})"
                };
                // Add the point to the series
                series.Points.Add(point);

                // Update the text box with the calculated data
                if (i == 0)
                {
                    this.textBox1.Text += randomList[i].ToString();
                }
                else
                {
                    this.textBox1.Text += "; " + randomList[i].ToString();
                }

                // Update the label with the size of the data list
                this.lblListSizeNum.Text = (randomList[i] + 1).ToString();
                // Redraw the chart
                chart1.Invalidate();
            }
        }

        private void btnRun2_Click(object sender, EventArgs e)
        {
            // Retrieve the input values from the text boxes (assuming you have two text boxes for input)
            bool isNum1 = int.TryParse(this.numericUpDown1.Text, out int xValue1);
            bool isNum2 = int.TryParse(this.numericUpDown2.Text, out int xValue2);

            if (isNum1 && isNum2 && xValue1 > 0 && xValue2 > 0)
            {
                // If 3x+1 tab is selected or if Collatz tab is selected
                if (this.tabControl1.SelectedIndex == 1)
                {
                    //  Method to calculate
                    chart1.Series.Clear();
                    obj.CalculateStockProjection(xValue2, xValue1);                
                    PlotRandomStockChart();
                }
                else if (this.tabControl1.SelectedIndex == 0)
                {
                    // Perform the 3x+1 calculation
                    obj.calc(xValue1);
                    // Plot the calculated data on the chart
                    PlotChart();
                }
                else
                {
                    // If input is invalid, reset the chart and show a message
                    btnClear_Click(sender, e);
                    obj.DataListPublic.Clear();
                    Start();
                    MessageBox.Show("Please enter valid integers greater than 0.");
                }

                // Reset the zoom on the chart
                ResetZoom();
            }

        }

        private List<double> GenerateRandomStockPrices(int count)
        {
            Random rand = new Random();
            List<double> prices = new List<double>();
            double price = rand.Next(1, 10);

            for (int i = 0; i < count; i++)
            {
                price += rand.NextDouble() - 0.5; // random walk
                prices.Add(price);
            }

            return prices;
        }

        private void panel1_Paint(object sender, PaintEventArgs e)
        {

        }
    }

}
//__---____---____---____---____---____---____---__.ooo END OF FILE ooo.__---____---____---____---____---____---____---__\\